<refentry id="{@id}">
  <refnamediv>
    <refname>Tutorial about using wo2009 library</refname>
    <refpurpose>This tutorial explains how to use wo2009 library
    and information about its services. This tutorial is evolving
    over time as library gets new classes.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <author>Hannu Lohtander 
    <authorblurb>{@link mailto:hannu.lohtander@uta.fi
    hannu.lohtander@uta.fi}</authorblurb></author>
  </refsynopsisdiv>
  <refsect1 id="{@id intro}">
    <title>About the Library</title>
    <para>What is library? Library is collection of classes that
    are provided to programmer for isolated tasks. Good examples
    are session handling, security implementations like
    SomeRequest, database abstractions, etc... All the library
    classes can be found from package library and in folder
    library/. Main library is framworks library/some/.</para>
    <para>Wo2009 framework has session service, MVC
    base classes, It also has in build request
    sanitation: SomeRequest and global object factory:
    SomeFactory.</para>
  </refsect1>
  <refsect1 id="{@id howto}">
    <title>How to use library</title>
    <para>Library has its own naming conventions and class loader
    functionality. Main library is in: 
    <programlisting>library/some</programlisting>All the files in
    this library has classes with names starting with word Some.
    Eg. SomeSession, SomeCookie, etc. File names are class name
    without Some prefix: SomeSession in session.php. This is
    important naming convention to follow.</para>
  </refsect1>
  <refsect1 id="{@id some}">
    <title>Some Library Folder</title>
    <para>Framework, wo2009, has its library code placed to
    library/some. Classes are loaded from this library using class
    loader function {@link someloader()}. SomeSession class is for
    example loaded: 
    <programlisting>
    someloader('some.session.session')</programlisting>All the
    libraries are documented at their corresponding
    interfaces.</para>
    <refsect2 id="{@id somefactory}">
      <title>SomeFactory</title>
      <para>Framework registry for global object is called
      SomeFactory.</para>
      <para>{@link ISomeFactory}</para>
    </refsect2>
    <refsect2 id="{@id someapplication}">
      <title>SomeApplication</title>
      <para>SomeApplication implements Front Controller pattern.
      SomeApplication is responsible to do routing to content
      applications, buffering output generated by content
      application and returning it in controlled matter as http
      response.</para>
      <para>SomeApplication initilalizes services, that framework
      library provides, like session, language abstraction and
      configuration.</para>
      <para>SomeApplication provides trigger for redirect. Redirect
      is http response specific header 'Location:url', that forces
      browser to go to given url.</para>
      <example>
        <title>Getting SomeApplication instance</title>
        <programlisting>$app =
        SomeFactory::getApplication();</programlisting>
      </example>
      <para>{@link ISomeApplication}</para>
    </refsect2>
	<refsect2 id="{@id somedatabase}">
      <title>SomeDatabase</title>
      <para>SomeDatabase is class that extends from PDO. That means, that PDO API is valid when working with this instance.
	  PDO api can be found from http://www.php.net/pdo
	  </para>
      <para></para>
      <para>SomeDatabase, DataBase Object, is constructed using parameters found in configuration.xml. When using postgres with 
	  identity authorization, username and password must be left blank.</para>
      <example>
        <title>Getting SomeDatabase instance</title>
        <programlisting>$database =
        SomeFactory::getDBO();</programlisting>
      </example>
      <para>{@link ISomeDatabase}</para>
    </refsect2>
	<refsect2 id="{@id somerow}">
      <title>SomeRow</title>
      <para>SomeRow is template and factory class for CRUD operations. 
	  Programmer never uses this class directly, but classes extending it. 
	  
	  </para>
    
      <para>
      Note: SomeRowUser is not normally accessed directly, as there is SomeUser class that has API for CRUD.
	  <example>
        <title>Getting SomeRowUser instance</title>
        <programlisting>
		someloader('some.database.user');<simpara></simpara>
		$userrow = SomeRow::getRow('user');
		</programlisting>
      </example>
	  </para>
      <para>{@link ISomeRow}</para>
    </refsect2>
    <refsect2 id="{@id somerequest}">
      <title>SomeRequest</title>
      <para>SomeRequest is wrapper aroud $_GET, $_POST, $_REQUEST,
      $_ENV and $_SESSION - the globals holding data from user.
      SomeRequest is security feature, it cleans values from
      possible malicious html tags. It also improves security by
      strong typing request variables through getInt, getFloat and
      similar static methods.</para>
      <para>{@link SomeRequest}</para>
    </refsect2>
    <refsect2 id="{@id somesession}">
      <title>SomeSession</title>
      <para>SomeSession is wrapper around $_SESSION hash. It
      encapsulates session variables to safer and more usable
      interface. It also hides the storage implementation.
      SomeSession is initialized by the Front Controller on
      application start up.</para>
      <para>{@link ISomeSession}</para>
    </refsect2>
  </refsect1>
  <refsect1 id="{@id external}">
    <title>External Libraries</title>
    <para>External libraries are placed to libraries folder, but to
    some other folder that 'some'. Call to someloader will change so, that first part of
    the string argument is changed from some to used folder name.</para>
  </refsect1>
</refentry>
